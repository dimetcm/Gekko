// How loud?
var volume = 11;

// Silence.
volume = 0;

// Calculate size of 3x4x5 cuboid.
{
  var volume = 3 * 4 * 5;
  print volume;
}

var global = "outside";
{
  var local = "inside";
  print global + local;
}

var a = "global a";
var b = "global b";
var c = "global c";
{
  var a = "outer a";
  var b = "outer b";
  {
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  print a;
  print b;
  print c;
}
print a;
print b;
print c;

/*
{
  var a = 0;
  var temp;

  for (var b = 1; a < 10000; b = temp + b) {
    print a;
    temp = a;
    a = b;
  }
}*/

{
    var a = 0;
    while (a <= 2)
    {
      a = a + 1;
      break;
    }
    print a;    
}

{
    var a = 0;
    while (true)
    {
      a = a + 1;

      if (a > 5)
      {
        break;
      }
    }
    print a;    
}

print clock();

fun sum(a, b, c)
{
  print a + b + c;
}

sum(1, 2, 3);
print sum;

fun withReturn(a)
{
  if (a < 2.0)
  {
    return 0.0;
  }

  return a * 2;
}

print withReturn(1);
print withReturn(3);

print "fibonacci seq";

fun fib(n) 
{
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i < 20; i = i + 1) 
{
  print fib(i);
}

fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".

fun thrice(fn) {
  for (var i = 1; i <= 3; i = i + 1) {
    fn(i);
  }
}

thrice(fun (a) {
  print a;
});

// fun () {}; lambda declaration without assignment treated causes runtime error

var a = "global";
{
  fun showA() {
    print a;
  }

  showA();
  var a = "block";
  showA();
}

fun bad() {
  var a = "first";
  //var a = "second";
}

fun unreachable()
{
  return 0;
  //var unreachableVar;
}


class ClassDeclarationTest 
{
  MemberFunction() 
  {
    return "class declared";
  }
}

print ClassDeclarationTest;

class MakeInstance {}
var instance = MakeInstance();
print instance;

class ClassMethodTest 
{
  Call()
  {
    print "some class method";
  }
}

ClassMethodTest().Call(); // some class method.

class ThisTest
{
  ThisTest(v)
  {
    this.radius = v;
    this.constructor = v;
  }

  Call()
  {
    print this.value; 
  }

  Area
  {
    return 3.14 * this.radius * this.radius;
  }
}

var instance = ThisTest(10);
print instance.constructor;
instance.value = 42;
instance.Call();

print instance.Area;

// this.outsideOfTheClass = 5.0;
